// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0
// source: qnq_rpc.proto

package QNQ

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalSyncClient is the client API for LocalSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalSyncClient interface {
	SingleSync(ctx context.Context, in *LocalSyncRequest, opts ...grpc.CallOption) (*Result, error)
	BatchSync(ctx context.Context, in *LocalSyncRequest, opts ...grpc.CallOption) (*Result, error)
	PartitionSync(ctx context.Context, in *LocalSyncRequest, opts ...grpc.CallOption) (*Result, error)
}

type localSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalSyncClient(cc grpc.ClientConnInterface) LocalSyncClient {
	return &localSyncClient{cc}
}

func (c *localSyncClient) SingleSync(ctx context.Context, in *LocalSyncRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/LocalSync/SingleSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSyncClient) BatchSync(ctx context.Context, in *LocalSyncRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/LocalSync/BatchSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSyncClient) PartitionSync(ctx context.Context, in *LocalSyncRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/LocalSync/PartitionSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalSyncServer is the server API for LocalSync service.
// All implementations must embed UnimplementedLocalSyncServer
// for forward compatibility
type LocalSyncServer interface {
	SingleSync(context.Context, *LocalSyncRequest) (*Result, error)
	BatchSync(context.Context, *LocalSyncRequest) (*Result, error)
	PartitionSync(context.Context, *LocalSyncRequest) (*Result, error)
	mustEmbedUnimplementedLocalSyncServer()
}

// UnimplementedLocalSyncServer must be embedded to have forward compatible implementations.
type UnimplementedLocalSyncServer struct {
}

func (UnimplementedLocalSyncServer) SingleSync(context.Context, *LocalSyncRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleSync not implemented")
}
func (UnimplementedLocalSyncServer) BatchSync(context.Context, *LocalSyncRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSync not implemented")
}
func (UnimplementedLocalSyncServer) PartitionSync(context.Context, *LocalSyncRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionSync not implemented")
}
func (UnimplementedLocalSyncServer) mustEmbedUnimplementedLocalSyncServer() {}

// UnsafeLocalSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalSyncServer will
// result in compilation errors.
type UnsafeLocalSyncServer interface {
	mustEmbedUnimplementedLocalSyncServer()
}

func RegisterLocalSyncServer(s grpc.ServiceRegistrar, srv LocalSyncServer) {
	s.RegisterService(&LocalSync_ServiceDesc, srv)
}

func _LocalSync_SingleSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSyncServer).SingleSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalSync/SingleSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSyncServer).SingleSync(ctx, req.(*LocalSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSync_BatchSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSyncServer).BatchSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalSync/BatchSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSyncServer).BatchSync(ctx, req.(*LocalSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSync_PartitionSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSyncServer).PartitionSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalSync/PartitionSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSyncServer).PartitionSync(ctx, req.(*LocalSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalSync_ServiceDesc is the grpc.ServiceDesc for LocalSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LocalSync",
	HandlerType: (*LocalSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SingleSync",
			Handler:    _LocalSync_SingleSync_Handler,
		},
		{
			MethodName: "BatchSync",
			Handler:    _LocalSync_BatchSync_Handler,
		},
		{
			MethodName: "PartitionSync",
			Handler:    _LocalSync_PartitionSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qnq_rpc.proto",
}

// RemoteSyncClient is the client API for RemoteSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteSyncClient interface {
	AddTarget(ctx context.Context, in *RemoteTargetRequest, opts ...grpc.CallOption) (*Result, error)
	DeleteTarget(ctx context.Context, in *RemoteTargetRequest, opts ...grpc.CallOption) (*Result, error)
	GetFileInfo(ctx context.Context, in *GetRemoteFileInfoRequest, opts ...grpc.CallOption) (*FileInfoResult, error)
	InputSync(ctx context.Context, in *RemoteSyncRequest, opts ...grpc.CallOption) (*Result, error)
	OutputSync(ctx context.Context, in *RemoteSyncRequest, opts ...grpc.CallOption) (*Result, error)
}

type remoteSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteSyncClient(cc grpc.ClientConnInterface) RemoteSyncClient {
	return &remoteSyncClient{cc}
}

func (c *remoteSyncClient) AddTarget(ctx context.Context, in *RemoteTargetRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RemoteSync/AddTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSyncClient) DeleteTarget(ctx context.Context, in *RemoteTargetRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RemoteSync/DeleteTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSyncClient) GetFileInfo(ctx context.Context, in *GetRemoteFileInfoRequest, opts ...grpc.CallOption) (*FileInfoResult, error) {
	out := new(FileInfoResult)
	err := c.cc.Invoke(ctx, "/RemoteSync/GetFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSyncClient) InputSync(ctx context.Context, in *RemoteSyncRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RemoteSync/InputSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSyncClient) OutputSync(ctx context.Context, in *RemoteSyncRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RemoteSync/OutputSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteSyncServer is the server API for RemoteSync service.
// All implementations must embed UnimplementedRemoteSyncServer
// for forward compatibility
type RemoteSyncServer interface {
	AddTarget(context.Context, *RemoteTargetRequest) (*Result, error)
	DeleteTarget(context.Context, *RemoteTargetRequest) (*Result, error)
	GetFileInfo(context.Context, *GetRemoteFileInfoRequest) (*FileInfoResult, error)
	InputSync(context.Context, *RemoteSyncRequest) (*Result, error)
	OutputSync(context.Context, *RemoteSyncRequest) (*Result, error)
	mustEmbedUnimplementedRemoteSyncServer()
}

// UnimplementedRemoteSyncServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteSyncServer struct {
}

func (UnimplementedRemoteSyncServer) AddTarget(context.Context, *RemoteTargetRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTarget not implemented")
}
func (UnimplementedRemoteSyncServer) DeleteTarget(context.Context, *RemoteTargetRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTarget not implemented")
}
func (UnimplementedRemoteSyncServer) GetFileInfo(context.Context, *GetRemoteFileInfoRequest) (*FileInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedRemoteSyncServer) InputSync(context.Context, *RemoteSyncRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputSync not implemented")
}
func (UnimplementedRemoteSyncServer) OutputSync(context.Context, *RemoteSyncRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputSync not implemented")
}
func (UnimplementedRemoteSyncServer) mustEmbedUnimplementedRemoteSyncServer() {}

// UnsafeRemoteSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteSyncServer will
// result in compilation errors.
type UnsafeRemoteSyncServer interface {
	mustEmbedUnimplementedRemoteSyncServer()
}

func RegisterRemoteSyncServer(s grpc.ServiceRegistrar, srv RemoteSyncServer) {
	s.RegisterService(&RemoteSync_ServiceDesc, srv)
}

func _RemoteSync_AddTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSyncServer).AddTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteSync/AddTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSyncServer).AddTarget(ctx, req.(*RemoteTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSync_DeleteTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSyncServer).DeleteTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteSync/DeleteTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSyncServer).DeleteTarget(ctx, req.(*RemoteTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSync_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSyncServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteSync/GetFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSyncServer).GetFileInfo(ctx, req.(*GetRemoteFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSync_InputSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSyncServer).InputSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteSync/InputSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSyncServer).InputSync(ctx, req.(*RemoteSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSync_OutputSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSyncServer).OutputSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteSync/OutputSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSyncServer).OutputSync(ctx, req.(*RemoteSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteSync_ServiceDesc is the grpc.ServiceDesc for RemoteSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RemoteSync",
	HandlerType: (*RemoteSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTarget",
			Handler:    _RemoteSync_AddTarget_Handler,
		},
		{
			MethodName: "DeleteTarget",
			Handler:    _RemoteSync_DeleteTarget_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _RemoteSync_GetFileInfo_Handler,
		},
		{
			MethodName: "InputSync",
			Handler:    _RemoteSync_InputSync_Handler,
		},
		{
			MethodName: "OutputSync",
			Handler:    _RemoteSync_OutputSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qnq_rpc.proto",
}

// TaskCenterClient is the client API for TaskCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskCenterClient interface {
	GetTaskInfo(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskInfoResult, error)
}

type taskCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskCenterClient(cc grpc.ClientConnInterface) TaskCenterClient {
	return &taskCenterClient{cc}
}

func (c *taskCenterClient) GetTaskInfo(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskInfoResult, error) {
	out := new(TaskInfoResult)
	err := c.cc.Invoke(ctx, "/TaskCenter/GetTaskInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskCenterServer is the server API for TaskCenter service.
// All implementations must embed UnimplementedTaskCenterServer
// for forward compatibility
type TaskCenterServer interface {
	GetTaskInfo(context.Context, *GetTaskRequest) (*TaskInfoResult, error)
	mustEmbedUnimplementedTaskCenterServer()
}

// UnimplementedTaskCenterServer must be embedded to have forward compatible implementations.
type UnimplementedTaskCenterServer struct {
}

func (UnimplementedTaskCenterServer) GetTaskInfo(context.Context, *GetTaskRequest) (*TaskInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInfo not implemented")
}
func (UnimplementedTaskCenterServer) mustEmbedUnimplementedTaskCenterServer() {}

// UnsafeTaskCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskCenterServer will
// result in compilation errors.
type UnsafeTaskCenterServer interface {
	mustEmbedUnimplementedTaskCenterServer()
}

func RegisterTaskCenterServer(s grpc.ServiceRegistrar, srv TaskCenterServer) {
	s.RegisterService(&TaskCenter_ServiceDesc, srv)
}

func _TaskCenter_GetTaskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCenterServer).GetTaskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskCenter/GetTaskInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCenterServer).GetTaskInfo(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskCenter_ServiceDesc is the grpc.ServiceDesc for TaskCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskCenter",
	HandlerType: (*TaskCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskInfo",
			Handler:    _TaskCenter_GetTaskInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qnq_rpc.proto",
}

// SysProbeClient is the client API for SysProbe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysProbeClient interface {
	// 获取系统信息
	GetSysInfo(ctx context.Context, in *GetSysInfoRequest, opts ...grpc.CallOption) (*SysInfoResult, error)
	// 获取性能探针
	GetPerfProbe(ctx context.Context, in *GetPerfProbeRequest, opts ...grpc.CallOption) (*PerfProbeResult, error)
}

type sysProbeClient struct {
	cc grpc.ClientConnInterface
}

func NewSysProbeClient(cc grpc.ClientConnInterface) SysProbeClient {
	return &sysProbeClient{cc}
}

func (c *sysProbeClient) GetSysInfo(ctx context.Context, in *GetSysInfoRequest, opts ...grpc.CallOption) (*SysInfoResult, error) {
	out := new(SysInfoResult)
	err := c.cc.Invoke(ctx, "/SysProbe/GetSysInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysProbeClient) GetPerfProbe(ctx context.Context, in *GetPerfProbeRequest, opts ...grpc.CallOption) (*PerfProbeResult, error) {
	out := new(PerfProbeResult)
	err := c.cc.Invoke(ctx, "/SysProbe/GetPerfProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysProbeServer is the server API for SysProbe service.
// All implementations must embed UnimplementedSysProbeServer
// for forward compatibility
type SysProbeServer interface {
	// 获取系统信息
	GetSysInfo(context.Context, *GetSysInfoRequest) (*SysInfoResult, error)
	// 获取性能探针
	GetPerfProbe(context.Context, *GetPerfProbeRequest) (*PerfProbeResult, error)
	mustEmbedUnimplementedSysProbeServer()
}

// UnimplementedSysProbeServer must be embedded to have forward compatible implementations.
type UnimplementedSysProbeServer struct {
}

func (UnimplementedSysProbeServer) GetSysInfo(context.Context, *GetSysInfoRequest) (*SysInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysInfo not implemented")
}
func (UnimplementedSysProbeServer) GetPerfProbe(context.Context, *GetPerfProbeRequest) (*PerfProbeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerfProbe not implemented")
}
func (UnimplementedSysProbeServer) mustEmbedUnimplementedSysProbeServer() {}

// UnsafeSysProbeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysProbeServer will
// result in compilation errors.
type UnsafeSysProbeServer interface {
	mustEmbedUnimplementedSysProbeServer()
}

func RegisterSysProbeServer(s grpc.ServiceRegistrar, srv SysProbeServer) {
	s.RegisterService(&SysProbe_ServiceDesc, srv)
}

func _SysProbe_GetSysInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysProbeServer).GetSysInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SysProbe/GetSysInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysProbeServer).GetSysInfo(ctx, req.(*GetSysInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysProbe_GetPerfProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerfProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysProbeServer).GetPerfProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SysProbe/GetPerfProbe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysProbeServer).GetPerfProbe(ctx, req.(*GetPerfProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysProbe_ServiceDesc is the grpc.ServiceDesc for SysProbe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysProbe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SysProbe",
	HandlerType: (*SysProbeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSysInfo",
			Handler:    _SysProbe_GetSysInfo_Handler,
		},
		{
			MethodName: "GetPerfProbe",
			Handler:    _SysProbe_GetPerfProbe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qnq_rpc.proto",
}
